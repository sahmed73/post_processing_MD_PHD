# -*- coding: utf-8 -*-
"""
Created on Wed Aug 16 11:21:43 2023

@author: arup2
"""

import magnolia.bondfile_parser as bfp
import matplotlib.pyplot as plt
import numpy as np

directory    = r'C:\Users\arup2\OneDrive - University of California Merced\Desktop\LAMMPS\Antioxidants\ABCDE\B\B_300_O2\Production\200_Less_TempRamp_1150K'
filename     = '\\bonds.reaxc'
bondfilepath = directory+filename
atomsymbols  = ['H','C','O']
bondinfo = bfp.parsebondfile(bondfilepath, bo=True)
#%%
neighbours = bondinfo['neighbours']
bondorders = bondinfo['bondorders']
atypes     = bondinfo['atypes']
steps      = list(neighbours.keys())
firststepneigh = neighbours[steps[0]]

bonds = {}

for parent,children in firststepneigh.items():
    #O-H bond
    key = 'O-H'
    if atypes[parent]==3:
        for child in children:
            if atypes[child]==1:
                bond = (parent,child)
                if key in bonds:
                    bonds[key].append(bond)
                else:
                    bonds[key]=[]
    
    #tert-butyl
    key = 'tert-butyl'
    if atypes[parent]==2:
        ff = [atypes[x] for x in children].count(2)
        if ff==4:
            for child in children:
                fff = [atypes[x] for x in firststepneigh[child]].count(2)
                if fff==3:
                    bond = (parent,child)
                    if key in bonds:
                        bonds[key].append(bond)
                    else:
                        bonds[key]=[]
    
    #link
    key = 'link'
    if atypes[parent]==2:
        ff = [atypes[x] for x in children].count(2)
        if ff==3:
            for child in children:
                fff = [atypes[x] for x in firststepneigh[child]].count(2)
                if fff==3:
                    bond = (parent,child)
                    if key in bonds:
                        bonds[key].append(bond)
                    else:
                        bonds[key]=[]
    #C-H
    key = 'C-H'
    if atypes[parent]==1:
        for child in children:
            if atypes[child]==2:
                bond = (parent,child)
                if key in bonds:
                    bonds[key].append(bond)
                else:
                    bonds[key]=[]
                    
    #C=C
    key = 'C=C'
    if atypes[parent]==2:
        Noxy = [atypes[x] for x in children].count(3)
        Nhyd = [atypes[x] for x in children].count(1)
        if Noxy==1 and Nhyd==2:
            for child in children:
                if atypes[child]==2:
                    for schild in firststepneigh[child]:
                        if atypes[schild]==2 and schild!=parent:
                            bond = (schild,child)
                            if key in bonds:
                                bonds[key].append(bond)
                            else:
                                bonds[key]=[]
    
    # -OH
    key = '-OH'
    if atypes[parent]==3:
        for child in children:
            if atypes[child]==2:
                bond = (parent,child)
                if key in bonds:
                    bonds[key].append(bond)
                else:
                    bonds[key]=[]
    
    # -OH-1
    key = '-OH-1'
    keyy= '-OH-2'
    if atypes[parent]==3:
        for child in children:
            if atypes[child]==2:
                ff = [atypes[x] for x in firststepneigh[child]].count(2)
                bond = (parent,child)
                if ff==2:
                   if key in bonds:
                       bonds[key].append(bond)
                   else:
                       bonds[key]=[]
                else:
                    if keyy in bonds:
                        bonds[keyy].append(bond)
                    else:
                        bonds[keyy]=[]
    
    
    # key = 'OH-H'
    # for step,neigh in neighbours.items():
    #     for parent,children in neigh.items():
    #         if parent<=3200 and atypes[parent]==3:
    #             for child in children:
    #                 if [atypes[x] for x in children].count(1)==2:
    #                     bond = (parent,child)
    #                     if key in bonds:
    #                         bonds[key].append(bond)
    #                     else:
    #                         bonds[key]=[]

#%%

savebond

import magnolia.needless_essential as ne
marker = ['s','^','x','o','>','*']
color    = ['b','c','m','r','g','grey']
cutoff = 1
tol    = 0.4
skipts = 0#(1150-300)/4
markevery = 150

bondname = {'O-H':'Bond-1 dissociation',
            '-OH':'Bond-2 dissociation',
            'link':'Bond-3 dissociation',
            'C=C':'Bond-4 dissociation',
            'HO-H': 'HO-H bond formation'
            #'tert-butyl':'NoNeed'
            }
# color = dict(zip(bondname.keys(),color))

for i,key in enumerate(bondname.keys()):
    if key in ['C-H']: continue
    if key in ['C=C']:
        cutoff = 1.5
        tol    = 0.4
    
    if key== 'HO-H': booond = bonds['O-H']
    else: booond = bonds[key]
    ps, nbonds = bfp.get_nbondsVStime(bondorders, atypes, booond,
                                      skipts=skipts,cutoff=cutoff, tol=tol)
    
    if key== 'HO-H':
        nbonds = savebond
        nbonds = [0]*(4850-4001)+nbonds
    plt.plot(ps,nbonds,label=bondname[key],marker=marker[i],
             markevery=markevery,markersize=4,linewidth=0.8,
             color=color[i])

###-plot-####
d = directory[directory.find('LAMMPS')+7:]
title = d[d.find('\\')+1:]+'\n'+'Molecule B\n'
plt.title(title)
#plt.title('Number of bond vs time {}'.format(bond_type))
plt.legend(bbox_to_anchor=(1,1))
plt.xlabel('Time (ps)')
plt.ylabel('Number of bonds')
# plt.xlim(right=1150)
savedir = r'C:\Users\arup2\OneDrive - University of California Merced\Desktop\LAMMPS\Post Processing\lammps_processing\python_outputs\bondplot'
# plt.grid('on')
plt.savefig(savedir+'//_B-'+ne.randstr(), dpi=300,bbox_inches='tight')